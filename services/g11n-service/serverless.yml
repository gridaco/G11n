service:
  name: g11n

plugins:
  - serverless-bundle
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-domain-manager

custom:
  bundle:
    caching: false
    forceExclude:
      - '@nestjs/microservices'
      - '@nestjs/microservices/microservices-module'
      - '@nestjs/websockets/socket-module'
      - 'cache-manager'
  customDomain:
    domainName: g11n.bridged.cc
    hostedZoneId: us-west-1
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  serverless-offline:
    httpPort: 4004

resources:
  Resources:
    globalizationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: '${self:provider.environment.DYNAMODB_KEY_TABLE}'
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    layerKeyMapTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: '${self:provider.environment.DYNAMODB_LAYER_KEY_MAP_TABLE}'
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: projectId
            AttributeType: S
          - AttributeName: keyId
            AttributeType: S
          - AttributeName: sceneId
            AttributeType: S
          - AttributeName: layerId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: projectIndex
            KeySchema:
              - AttributeName: projectId
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: keyIndex
            KeySchema:
              - AttributeName: keyId
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: sceneIndex
            KeySchema:
              - AttributeName: sceneId
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: layerIndex
            KeySchema:
              - AttributeName: layerId
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-1
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    DYNAMODB_KEY_TABLE: '${self:service}-key-${opt:stage, self:provider.stage}'
    DYNAMODB_LAYER_KEY_MAP_TABLE: '${self:service}-layer-key-map-${opt:stage, self:provider.stage}'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_KEY_TABLE}'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_LAYER_KEY_MAP_TABLE}'

package:
  individually: true

functions:
  main:
    handler: src/lambda.handler
    events:
      - http:
          method: any
          path: /{proxy+}
